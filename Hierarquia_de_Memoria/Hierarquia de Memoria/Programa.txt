00000000000000000000000000000000|00100000001000000000001000000000| main:		addi	$1, $0, 512		# $1 = 200H
00000000000000000000000000000100|00100000010000000000000000000110| 		addi	$2, $0, 6		# $2 = 6, número de valores no vetor
00000000000000000000000000001000|00100000011000000000000000000001|		addi	$3, $0, 1		# $3 = 1		(1 - primeiro valor)
00000000000000000000000000001100|10101100011000010000000000000000|		sw	$3, 0($1)		# v[0+200H] = $3
00000000000000000000000000010000|00100000011000110000000000000101| 		addi	$3, $3, 5		# $3 = $3 + 5		(6 - segundo valor)
00000000000000000000000000010100|10101100011000010000000000000100| 		sw	$3, 4($1)		# v[0+204H] = $3
00000000000000000000000000011000|00100000011000110000000000000101| 		addi	$3, $3, 5		# $3 = $3 + 5		(11 - terceiro valor)
00000000000000000000000000011100|10101100011000010000000000001000| 		sw	$3, 8($1)		# v[0+208H] = $3
00000000000000000000000000100000|00100000011000111111111111111000| 		addi	$3, $3, -8		# $3 = $3 - 8		(3 - quarto valor)
00000000000000000000000000100100|10101100011000010000000000001100| 		sw	$3, 12($1)		# v[0+20CH] = $3
00000000000000000000000000101000|00100000011000110000000000000101| 		addi	$3, $3, 5		# $3 = $3 + 5		(8 - quinto valor)
00000000000000000000000000101100|10101100011000010000000000010000| 		sw	$3, 16($1)		# v[0+210H] = $3
00000000000000000000000000110000|00100000011000111111111111111000| 		addi	$3, $3, -8		# $3 = $3 - 8		(0 - sexto valor)
00000000000000000000000000110100|10101100011000010000000000010100| 		sw	$3, 20($1)		# v[0+214H] = $3
00000000000000000000000000111000|00001100000000000000000000111100| 		jal	sort
00000000000000000000000000111100|00100000100000000000000000000000| sort: 	addi 	$4, $0, 0		# i = 0
00000000000000000000000001000000|00000000110001000001000000101010| for1tst: 	slt	$6, $4, $2		# reg $6 = 1 if $4 < $2 (i < n)
00000000000000000000000001000100|00010000110000000000000010010100| 		beq 	$6, $0, exit1		# go to exit1 if $4 >= $2 (i >= n)
00000000000000000000000001001000|00100000101001001111111111111111| 		addi 	$5, $4, -1		# j = i – 1 
00000000000000000000000001001100|00101000110001010000000000000000| for2tst: 	slti	$6, $5, 0 		# reg $6 = 1 if $5 < 0 (j < 0)
00000000000000000000000001010000|00010100110000000000000010001100| 		bne 	$6, $0, exit2		# go to exit2 if $5 < 0 (j < 0)
00000000000000000000000001010100|00000000011001010000000010000000| 		sll 	$3, $5, 2		# reg $3 = j * 4 
00000000000000000000000001011000|00100000001000000000001000000000| 		addi 	$1, $3, 512		# reg $1 = v + (j * 4)
00000000000000000000000001011100|10001100011000010000000000000000| 		lw 	$3, 0($1)		# reg $3 = v[j]
00000000000000000000000001100000|10001100001000010000000000000100| 		lw 	$1, 4($1)		# reg $1 = v[j + 1]
00000000000000000000000001100100|00000000110000010001100000101010| 		slt 	$6, $1, $3 		# reg $6 = 0 if $1 Š $3
00000000000000000000000001101000|00010000110000000000000010001100|		beq 	$6, $0, exit2		# go to exit2 if $1 Š $3
00000000000000000000000001101100|00000000011001010000000010000000|		sll 	$3, $5, 2 		# reg $3 = k * 4
00000000000000000000000001110000|00100000011000110000001000000000|		addi 	$3, $3, 512		# reg $3 = v + (k * 4), reg $3 has the address of v[k]
00000000000000000000000001110100|10001100110000110000000000000000|		lw 	$6, 0($3)		# reg $6 (temp) = v[k] 
00000000000000000000000001111000|10001100001000110000000000000100|		lw	$1, 4($3) 		# reg $1 = v[k + 1] 
00000000000000000000000001111100|10101100001000110000000000000000| 		sw 	$1, 0($3) 		# v[k] = reg $1 
00000000000000000000000010000000|10101100110000110000000000000100| 		sw 	$6, 4($3) 		# v[k+1] = reg $6 (temp)
00000000000000000000000010000100|00100000101001011111111111111111|		addi 	$5, $5, -1		# j –= 1
00000000000000000000000010001000|00001000000000000000000001001100| 		j 	for2tst 		# jump to test of inner loop
00000000000000000000000010001100|00100000100001000000000000000001| exit2: 	addi 	$4, $4, 1 		# i += 1
00000000000000000000000010010000|00001000000000000000000001000000|		j 	for1tst 		# jump to test of outer loop
00000000000000000000000010010100|00000000111000000000000000001000| exit1: 	jr 	$7 			# return to calling routine